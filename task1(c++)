#include <iostream>
#include <vector>
#include <cmath>

using namespace std;

typedef vector<vector<double>> Matrix;
typedef vector<double> Vector;

Vector multiply(const Matrix& A, const Vector& B) {
    int n = A.size();
    Vector result(n, 0);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            result[i] += A[i][j] * B[j];
        }
    }
    return result;
}

Matrix obrat(const Matrix& A) {
    int n = A.size();
    Matrix inverse(n, Vector(n, 0));
    Matrix temp = A;

    for (int i = 0; i < n; ++i) {
        inverse[i][i] = 1;
    }

    for (int i = 0; i < n; ++i) {
        double pivot = temp[i][i];
        if (pivot == 0) {
            cout << "Нельзя сделать обратную матрицу" << endl;
            return Matrix(); 
        }

        for (int j = 0; j < n; ++j) {
            temp[i][j] /= pivot;
            inverse[i][j] /= pivot;
        }

        for (int k = 0; k < n; ++k) {
            if (k != i) {
                double factor = temp[k][i];
                for (int j = 0; j < n; ++j) {
                    temp[k][j] -= factor * temp[i][j];
                    inverse[k][j] -= factor * inverse[i][j];
                }
            }
        }
    }

    return inverse;
}

Vector solveMatrixMethod(const Matrix& A, const Vector& B) {
    Matrix A_inv = obrat(A);
    if (A_inv.empty()) {
        return Vector(); 
    }
    return multiply(A_inv, B);
}


Vector solveGaussMethod(Matrix A, Vector B) {
    int n = A.size();

    for (int i = 0; i < n; ++i) {
        int maxRow = i;
        for (int k = i + 1; k < n; ++k) {
            if (abs(A[k][i]) > abs(A[maxRow][i])) {
                maxRow = k;
            }
        }

        swap(A[i], A[maxRow]);
        swap(B[i], B[maxRow]);

        for (int k = i + 1; k < n; ++k) {
            double c = -A[k][i] / A[i][i];
            for (int j = i; j < n; ++j) {
                if (i == j) {
                    A[k][j] = 0;
                }
                else {
                    A[k][j] += c * A[i][j];
                }
            }
            B[k] += c * B[i];
        }
    }

    Vector X(n);
    for (int i = n - 1; i >= 0; --i) {
        X[i] = B[i] / A[i][i];
        for (int k = i - 1; k >= 0; --k) {
            B[k] -= A[k][i] * X[i];
        }
    }

    return X;
}

int main() {
    setlocale(LC_ALL, "Russian");
    Matrix A = {
        {2, 7, -8, 6},
        {4, 4, 0, -7},
        {-1, -3, 6, 3},
        {9, -7, -2, -8}
    };
    Vector B = { -39, 41, 4, 113 };

    Vector X_matrix = solveMatrixMethod(A, B);
    if (!X_matrix.empty()) {
        cout << "Решение системы матричным методом: " << endl;
        for (double x : X_matrix) {
            cout << x << " ";
        }
        cout << endl;
    }

    Vector X_gauss = solveGaussMethod(A, B);
    cout << "Решение системы методом Гаусса: " << endl;
    for (double x : X_gauss) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}
